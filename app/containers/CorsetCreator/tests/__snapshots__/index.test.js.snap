// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<CorsetCreator /> Does not render the CorsetCreator when not logged in 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "injectedReducers": Object {
        "brand": [Function],
        "corsetGallery": [Function],
      },
      "injectedSagas": Object {
        "brand": Object {
          "mode": "@@saga-injector/restart-on-remount",
          "saga": [Function],
          "task": Object {
            "@@redux-saga/TASK": true,
            "cancel": [Function],
            "cont": undefined,
            "done": Promise {},
            "error": [Function],
            "id": 1,
            "isAborted": [Function],
            "isCancelled": [Function],
            "isRunning": [Function],
            "joiners": null,
            "name": "defaultSaga",
            "result": [Function],
            "setContext": [Function],
          },
        },
      },
      "replaceReducer": [Function],
      "runSaga": [Function],
      "subscribe": [Function],
      Symbol(Symbol.observable): [Function],
    }
  }
>
  <div>
    <withReducer(withSaga(Connect(BrandedHeaderBase)))>
      <withSaga(Connect(BrandedHeaderBase))>
        <Connect(BrandedHeaderBase)>
          <BrandedHeaderBase
            dispatch={[Function]}
            loggedIn={false}
          >
            <BrandedHeader__BH>
              <div
                className="BrandedHeader__BH-HxBPG kskhDL"
              >
                <BrandBox>
                  <BrandBox__BrandBoxBase>
                    <div
                      className="BrandBox__BrandBoxBase-bOpzwz dtwMcz"
                    >
                      <MegaLogo>
                        <MegaLogo__MegaLogoBase>
                          <div
                            className="MegaLogo__MegaLogoBase-gVmnHe fjUeHC"
                          >
                            <MegaLogo__C>
                              <span
                                className="MegaLogo__C-hBLyQD CnhnX"
                              >
                                C
                              </span>
                            </MegaLogo__C>
                            <MegaLogo__C>
                              <span
                                className="MegaLogo__C-hBLyQD iPmZWc"
                              >
                                T
                              </span>
                            </MegaLogo__C>
                          </div>
                        </MegaLogo__MegaLogoBase>
                      </MegaLogo>
                    </div>
                  </BrandBox__BrandBoxBase>
                </BrandBox>
                <BrandTitle>
                  <BrandTitle__BT>
                    <div
                      className="BrandTitle__BT-iyACyt doctaa"
                    >
                      <BrandTitle__BrandTitleBase>
                        <h1
                          className="BrandTitle__BrandTitleBase-fCqnon fsKsKs"
                        >
                          Cinched Tight
                        </h1>
                      </BrandTitle__BrandTitleBase>
                      <BrandTitle__BrandMessage>
                        <h2
                          className="BrandTitle__BrandMessage-bmovll bAcupH"
                        >
                          Celebrate Your Shape
                        </h2>
                      </BrandTitle__BrandMessage>
                    </div>
                  </BrandTitle__BT>
                </BrandTitle>
                <LogToggle
                  loggedIn={false}
                  onClick={[Function]}
                >
                  <LogToggle__LT
                    onClick={[Function]}
                  >
                    <a
                      className="LogToggle__LT-bRttfU iacwAB"
                      onClick={[Function]}
                    >
                      Log In
                    </a>
                  </LogToggle__LT>
                </LogToggle>
              </div>
            </BrandedHeader__BH>
          </BrandedHeaderBase>
        </Connect(BrandedHeaderBase)>
      </withSaga(Connect(BrandedHeaderBase))>
    </withReducer(withSaga(Connect(BrandedHeaderBase)))>
    <withReducer(Connect(CorsetCreator))>
      <Connect(CorsetCreator)>
        <CorsetCreator
          corsetGallery={Object {}}
          dispatch={[Function]}
          filteredCorsets={Array []}
          loggedIn={false}
        >
          <h1>
            Corset Creator
          </h1>
          <p>
            you must be logged in as an admin to access this page
          </p>
        </CorsetCreator>
      </Connect(CorsetCreator)>
    </withReducer(Connect(CorsetCreator))>
  </div>
</Provider>
`;

exports[`<CorsetCreator /> Renders a CorsetCreator when loggedIn and currentCorset is empty 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "injectedReducers": Object {
        "corsetGallery": [Function],
      },
      "injectedSagas": Object {},
      "replaceReducer": [Function],
      "runSaga": [Function],
      "subscribe": [Function],
      Symbol(Symbol.observable): [Function],
    }
  }
>
  <withReducer(Connect(CorsetCreator))>
    <Connect(CorsetCreator)>
      <CorsetCreator
        corsetGallery={Object {}}
        dispatch={[Function]}
        filteredCorsets={Array []}
        loggedIn={true}
      >
        <div>
          <HelmetWrapper
            defer={true}
            encodeSpecialCharacters={true}
          >
            <SideEffect(NullComponent)
              defer={true}
              encodeSpecialCharacters={true}
              meta={
                Array [
                  Object {
                    "content": "Use this screen to create a new corset in the corset gallery.",
                    "name": "description",
                  },
                ]
              }
              title="Create a new Corset"
              titleAttributes={Object {}}
            >
              <NullComponent
                defer={true}
                encodeSpecialCharacters={true}
                meta={
                  Array [
                    Object {
                      "content": "Use this screen to create a new corset in the corset gallery.",
                      "name": "description",
                    },
                  ]
                }
                title="Create a new Corset"
                titleAttributes={Object {}}
              />
            </SideEffect(NullComponent)>
          </HelmetWrapper>
          <FormComponent>
            <FormComponent__FC>
              <form
                className="FormComponent__FC-jRyaDy hZINgg"
              >
                <NameBox
                  inputLabel="Name"
                  inputName="productName"
                  onChange={[Function]}
                  value=""
                >
                  <div
                    className="form-row-primary"
                  >
                    <label
                      htmlFor="productName"
                    >
                      Name
                      <input
                        id="productName"
                        onChange={[Function]}
                        type="text"
                      />
                    </label>
                  </div>
                </NameBox>
                <DropDown
                  inputLabel="Type"
                  inputName="productType"
                  onChange={[Function]}
                  options={
                    Array [
                      "Overbust",
                      "Underbust",
                    ]
                  }
                  value="Overbust"
                >
                  <div
                    className="form-row-primary"
                  >
                    <label
                      htmlFor="productType"
                    >
                      Type
                      <select
                        id="productType"
                        onChange={[Function]}
                      >
                        <option
                          key="Overbust"
                          value="Overbust"
                        >
                          Overbust
                        </option>
                        <option
                          key="Underbust"
                          value="Underbust"
                        >
                          Underbust
                        </option>
                      </select>
                    </label>
                  </div>
                </DropDown>
                <SubmitButton
                  dataCursor="not-allowed"
                  enabled={false}
                  label="---"
                  onClick={[Function]}
                >
                  <SubmitButton__SB
                    data-cursor="not-allowed"
                    disabled={true}
                    onClick={[Function]}
                    type="submit"
                    value="---"
                  >
                    <input
                      className="SubmitButton__SB-cMjXsV hdYEGO"
                      data-cursor="not-allowed"
                      disabled={true}
                      onClick={[Function]}
                      type="submit"
                      value="---"
                    />
                  </SubmitButton__SB>
                </SubmitButton>
              </form>
            </FormComponent__FC>
          </FormComponent>
        </div>
      </CorsetCreator>
    </Connect(CorsetCreator)>
  </withReducer(Connect(CorsetCreator))>
</Provider>
`;
